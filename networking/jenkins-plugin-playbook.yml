- hosts: jenkins-ec2
  become: yes
  tasks:
  - name: read admin pwd
    shell: cat /var/lib/jenkins/secrets/initialAdminPassword
    register: adminpwd

  - name: unlock and add admin user
    jenkins_script:
     script: |
      import jenkins.model.*
      import hudson.security.*
      def instance = Jenkins.getInstance()
      def hudsonRealm = new HudsonPrivateSecurityRealm(false)
      hudsonRealm.createAccount('${user_id}', '${user_pwd}')
      instance.setSecurityRealm(hudsonRealm)
      def strategy = new FullControlOnceLoggedInAuthorizationStrategy()
      strategy.setAllowAnonymousRead(false)
      instance.setAuthorizationStrategy(strategy)
      instance.save()
     args:
      user_pwd: "{{ password }}"
      user_id: "{{ user_id }}"
     user: "{{ user_name }}"
     password: "{{ adminpwd.stdout }}"

  - name: complete setup wizard
    jenkins_script:
     script: |
      import static jenkins.model.Jenkins.instance as jenkins
      import jenkins.install.InstallState
      if (!jenkins.installState.isSetupComplete()) {
        InstallState.INITIAL_SETUP_COMPLETED.initializeState()
      }
     user: "{{ user_name }}"
     password: "{{ adminpwd.stdout }}"

  - name: install plugin
    jenkins_plugin:
     name: "{{ item }}"
     state: latest
     url_username: "{{ user_name }}"
     url_password: "{{ adminpwd.stdout }}"
    register: my_jenkins_plugin_unversioned     
    with_items:
      - ace-editor
      - ant
      - antisamy-markup-formatter
      - apache-httpcomponents-client-4-api
      - bootstrap4-api
      - bootstrap5-api
      - bouncycastle-api
      - branch-api
      - build-timeout
      - caffeine-api
      - checks-api
      - cloudbees-folder
      - command-launcher
      - credentials
      - credentials-binding
      - display-url-api
      - durable-task
      - echarts-api
      - email-ext
      - font-awesome-api
      - git
      - git-client
      - git-server
      - github
      - github-api
      - github-branch-source
      - gradle
      - handlebars
      - jackson2-api
      - jaxb
      - jdk-tool
      - jjwt-api
      - jquery3-api
      - jsch
      - junit
      - ldap
      - lockable-resources
      - mailer
      - matrix-auth
      - matrix-project
      - momentjs
      - nodejs
      - okhttp-api
      - pam-auth
      - pipeline-build-step
      - pipeline-github-lib
      - pipeline-graph-analysis
      - pipeline-input-step
      - pipeline-milestone-step
      - pipeline-model-api
      - pipeline-model-definition
      - pipeline-model-extensions
      - pipeline-rest-api
      - pipeline-stage-step
      - pipeline-stage-tags-metadata
      - pipeline-stage-view
      - plain-credentials
      - plugin-util-api
      - popper-api
      - popper2-api
      - resource-disposer
      - scm-api
      - script-security
      - snakeyaml-api
      - ssh-credentials
      - ssh-slaves
      - sshd
      - structs
      - timestamper
      - token-macro
      - trilead-api
      - workflow-aggregator
      - workflow-api
      - workflow-basic-steps
      - workflow-cps
      - workflow-cps-global-lib
      - workflow-durable-task-step
      - workflow-job
      - workflow-multibranch
      - workflow-scm-step
      - workflow-step-api
      - workflow-support
      - ws-cleanup
      - semantic-versioning-plugin

  - name: Check if restart is required by any of the unversioned plugins
    set_fact:
      jenkins_restart_required: yes
    when: item.changed
    with_items: "{{ my_jenkins_plugin_unversioned.results }}"

  - name: Restart Jenkins if required 
    service:
      name: jenkins
      state: restarted      
    when: jenkins_restart_required      

  - name: Reset the fact
    set_fact:
      jenkins_restart_required: no
    when: jenkins_restart_required    

  - name: printing admin password
    shell: cat /var/lib/jenkins/secrets/initialAdminPassword    
